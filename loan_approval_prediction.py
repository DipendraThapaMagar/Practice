# -*- coding: utf-8 -*-
"""Loan_Approval_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/105MHJ_CjvWs1S-XDQLBeqBNx-eS57rfV

#Importing the Dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""#Data collection and Processing"""

loan_data = pd.read_csv('/content/sample_data/train_u6lujuX_CVtuZ9i (1).csv')

type(loan_data)

loan_data.head()

loan_data.shape

"""# Initial Data Analysis"""

loan_data.describe()

# number of missing values in each column

loan_data.isnull().sum()

# dropping the missing values

loan_data = loan_data.dropna()

# Lable Encoding

loan_data.replace({"Loan_Status":{'N':0, 'Y':1}}, inplace=True)

# printing the first 5 rows of the datasets

loan_data.head()

loan_data.shape

# Dependent column values

loan_data['Dependents'].value_counts()

# replacing the value of 3+ to 4

loan_data = loan_data.replace(to_replace = '3+', value = 4)

# dependent values

loan_data['Dependents'].value_counts()

"""# Data Visualization"""

# Education and Loan Status

sns.countplot(x='Education', hue='Loan_Status', data = loan_data)

# Marital Status & Loan Status

sns.countplot(x='Married', hue='Loan_Status', data = loan_data)

# convert categorical columns to numerical values

loan_data.replace({'Married': {'No':0, 'Yes':1}, 'Gender':{"Male":1, "Female":0}, 'Self_Employed':{'No':0, 'Yes':1},
                   'Property_Area':{'Rural':0, 'Semiurban':1, 'Urban':2}, 'Education':{'Graduate':1, 'Not Graduate':0}}, inplace = True)

loan_data.head()

# separating the data and label

X = loan_data.drop(columns=['Loan_ID', 'Loan_Status'], axis = 1)
Y = loan_data['Loan_Status']

print(X)
print(Y)

"""#Spliting the data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# Training the model:

##Support Vector Machine Model
"""

classifier = svm.SVC(kernel='linear')

#training the data Support Vector Machine Model

classifier.fit(X_train, Y_train)

"""#Model Evaluation"""

# accuracy score on training data

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data : ', training_data_accuracy)

# accuracy score on testing data

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on testing data : ', test_data_accuracy)